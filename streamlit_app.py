import streamlit as st
import pandas as pd
from io import BytesIO
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Relat√≥rio de Acessos", layout="centered")
st.title("üìä Relat√≥rio de Acessos ao Parque")

# Upload do arquivo
arquivo = st.file_uploader("Fa√ßa o upload do arquivo Excel", type=["xlsx"])

if arquivo:
    try:
        # Leitura do arquivo
        df = pd.read_excel(arquivo)

        # Verifica se tem pelo menos 3 colunas
        if df.shape[1] < 3:
            st.error("O arquivo deve conter tr√™s colunas: Localizador, Categoria e Data/Hora.")
        else:
            # Renomeia colunas (ajuste conforme necess√°rio)
            df.columns = ["Localizador", "Categoria", "Data_Hora"]

            # Converte data/hora
            df['Data_Hora'] = pd.to_datetime(df['Data_Hora'], dayfirst=True, errors='coerce')
            df['Data'] = df['Data_Hora'].dt.date

            # Mapeamento final das categorias
            mapeamento_final = {
                # Day User
                "INGRESSO COMBO": "DAY-USER",
                "INGRESSO ADULTO PROMOCIONAL": "DAY-USER",
                "INGRESSO INFANTIL PROMOCIONAL": "DAY-USER",
                "INTEIRA INFANTIL BILHETERIA": "DAY-USER",
                "INGRESSO ADULTO BILHETERIA": "DAY-USER",
                "INGRESSO INFANTIL + ALMO√áO": "DAY-USER",
                "INGRESSO ESPECIAL": "DAY-USER",

                # Almo√ßo
                "INGRESSO ADULTO + ALMO√áO": "ALMO√áO",
                "APENAS ALMO√áO - ADULTO": "ALMO√áO",
                "APENAS ALMO√áO - INFANTIL": "ALMO√áO",

                # Ingresso Beb√™
                "INGRESSO BEB√ä": "INGRESSO BEB√ä",
                "INGRESSO BEB√ä + ALMO√áO": "INGRESSO BEB√ä",

                # Visitas Guiadas
                "VISITA GUIADA": "VISITA GUIADA",

                # Excurs√£o
                "INGRESSO EXCURS√ÉO": "EXCURSAO",

                # EcoVip
                "ECOVIP S/ CADASTRO": "ECOVIP",
                "EcoVip s/ Cadastro": "ECOVIP",
                "EcoVip s/ carteirinha": "ECOVIP",

                # Multiclubes (n√£o √© mais DAY-USER)
                "MULTICLUBES - DAY-USE": "MULTICLUBES - DAY-USE",

                # Agendamento Consultores
                "AGENDAMENTO - CONSULTORES": "AGEND CONS VENDAS",

                # Banda
                "INGRESSO BANDA": "BANDA",

                # Aniversariantes
                "INGRESSO ANIVERSARIANTE": "ANIVERSARIANTES",

                # Cortesias / Promo√ß√µes
                "CORTESIA COLABORADOR": "FUNCION√ÅRIOS",
                "CORTESIA A√á√ÉO PROMOCIONAL": "A√áOES PROMOCIONAIS",
                "CORTESIA R√ÅDIO TUPA": "A√áOES PROMOCIONAIS",
                "CORTESIA INFLUENCER": "A√áOES PROMOCIONAIS",
                "CORTESIA LIVE": "A√áOES PROMOCIONAIS",

                # Retorno
                "INGRESSO RETORNO": "INGRESSO RETORNO",

                # Outros
                "CASA DA √ÅRVORE": "CASA DA √ÅRVORE",
                "ECO LOUNGE": "ECO LOUNGE",
                "SEGURO CHUVA": "SEGURO CHUVA"
            }

            # Aplica mapeamento final
            df["Categoria Final"] = df["Categoria"].str.strip().str.upper().replace({k.upper(): v for k, v in mapeamento_final.items()})

            # Filtro por data
            datas_disponiveis = df['Data'].dropna().unique()
            if len(datas_disponiveis) >
